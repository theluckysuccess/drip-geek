package drip.geek;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple11;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.9.0.
 */
@SuppressWarnings("rawtypes")
public class FaucetV4 extends Contract {
    public static final String BINARY = "";

    public static final String FUNC_COMPOUNDTAX = "CompoundTax";

    public static final String FUNC_EXITTAX = "ExitTax";

    public static final String FUNC_MAX_UINT = "MAX_UINT";

    public static final String FUNC_AIRDROP = "airdrop";

    public static final String FUNC_AIRDROPS = "airdrops";

    public static final String FUNC_BALANCELEVEL = "balanceLevel";

    public static final String FUNC_CHECKIN = "checkin";

    public static final String FUNC_CLAIM = "claim";

    public static final String FUNC_CLAIMSAVAILABLE = "claimsAvailable";

    public static final String FUNC_CONTRACTINFO = "contractInfo";

    public static final String FUNC_CREDITSANDDEBITS = "creditsAndDebits";

    public static final String FUNC_CUSTODY = "custody";

    public static final String FUNC_DEPOSIT = "deposit";

    public static final String FUNC_DEPOSIT_BRACKET_SIZE = "deposit_bracket_size";

    public static final String FUNC_DRIPVAULTADDRESS = "dripVaultAddress";

    public static final String FUNC_GETCUSTODY = "getCustody";

    public static final String FUNC_INITIALIZE = "initialize";

    public static final String FUNC_ISBALANCECOVERED = "isBalanceCovered";

    public static final String FUNC_ISNETPOSITIVE = "isNetPositive";

    public static final String FUNC_LASTACTIVITY = "lastActivity";

    public static final String FUNC_MAXPAYOUTOF = "maxPayoutOf";

    public static final String FUNC_MAX_PAYOUT_CAP = "max_payout_cap";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_PAYOUTOF = "payoutOf";

    public static final String FUNC_REF_BALANCES = "ref_balances";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ROLL = "roll";

    public static final String FUNC_SUSTAINABILITYFEEV2 = "sustainabilityFeeV2";

    public static final String FUNC_TOTAL_AIRDROPS = "total_airdrops";

    public static final String FUNC_TOTAL_BNB = "total_bnb";

    public static final String FUNC_TOTAL_DEPOSITED = "total_deposited";

    public static final String FUNC_TOTAL_TXS = "total_txs";

    public static final String FUNC_TOTAL_USERS = "total_users";

    public static final String FUNC_TOTAL_WITHDRAW = "total_withdraw";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_UPDATECOMPOUNDTAX = "updateCompoundTax";

    public static final String FUNC_UPDATEDEPOSITBRACKETSIZE = "updateDepositBracketSize";

    public static final String FUNC_UPDATEEXITTAX = "updateExitTax";

    public static final String FUNC_UPDATEHOLDREQUIREMENTS = "updateHoldRequirements";

    public static final String FUNC_UPDATEINITIALDEPOSIT = "updateInitialDeposit";

    public static final String FUNC_UPDATEMAXPAYOUTCAP = "updateMaxPayoutCap";

    public static final String FUNC_UPDATEPAYOUTRATE = "updatePayoutRate";

    public static final String FUNC_UPDATEREFBONUS = "updateRefBonus";

    public static final String FUNC_UPDATEREFDEPTH = "updateRefDepth";

    public static final String FUNC_USERINFO = "userInfo";

    public static final String FUNC_USERINFOTOTALS = "userInfoTotals";

    public static final String FUNC_USERS = "users";

    public static final Event BALANCETRANSFER_EVENT = new Event("BalanceTransfer", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event BENEFICIARYUPDATE_EVENT = new Event("BeneficiaryUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event CHECKIN_EVENT = new Event("Checkin", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DIRECTPAYOUT_EVENT = new Event("DirectPayout", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event HEARTBEAT_EVENT = new Event("HeartBeat", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event HEARTBEATINTERVALUPDATE_EVENT = new Event("HeartBeatIntervalUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LEADERBOARD_EVENT = new Event("Leaderboard", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event LIMITREACHED_EVENT = new Event("LimitReached", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event MANAGERUPDATE_EVENT = new Event("ManagerUpdate", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event MATCHPAYOUT_EVENT = new Event("MatchPayout", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWAIRDROP_EVENT = new Event("NewAirdrop", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event NEWDEPOSIT_EVENT = new Event("NewDeposit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event UPLINE_EVENT = new Event("Upline", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    public static final Event WITHDRAW_EVENT = new Event("Withdraw", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Uint256>() {}));
    ;

    @Deprecated
    protected FaucetV4(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected FaucetV4(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected FaucetV4(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected FaucetV4(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<BalanceTransferEventResponse> getBalanceTransferEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BALANCETRANSFER_EVENT, transactionReceipt);
        ArrayList<BalanceTransferEventResponse> responses = new ArrayList<BalanceTransferEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BalanceTransferEventResponse typedResponse = new BalanceTransferEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._src = (Address) eventValues.getIndexedValues().get(0);
            typedResponse._dest = (Address) eventValues.getIndexedValues().get(1);
            typedResponse._deposits = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse._payouts = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BalanceTransferEventResponse> balanceTransferEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BalanceTransferEventResponse>() {
            @Override
            public BalanceTransferEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BALANCETRANSFER_EVENT, log);
                BalanceTransferEventResponse typedResponse = new BalanceTransferEventResponse();
                typedResponse.log = log;
                typedResponse._src = (Address) eventValues.getIndexedValues().get(0);
                typedResponse._dest = (Address) eventValues.getIndexedValues().get(1);
                typedResponse._deposits = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse._payouts = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<BalanceTransferEventResponse> balanceTransferEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BALANCETRANSFER_EVENT));
        return balanceTransferEventFlowable(filter);
    }

    public List<BeneficiaryUpdateEventResponse> getBeneficiaryUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(BENEFICIARYUPDATE_EVENT, transactionReceipt);
        ArrayList<BeneficiaryUpdateEventResponse> responses = new ArrayList<BeneficiaryUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            BeneficiaryUpdateEventResponse typedResponse = new BeneficiaryUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<BeneficiaryUpdateEventResponse> beneficiaryUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, BeneficiaryUpdateEventResponse>() {
            @Override
            public BeneficiaryUpdateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(BENEFICIARYUPDATE_EVENT, log);
                BeneficiaryUpdateEventResponse typedResponse = new BeneficiaryUpdateEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.beneficiary = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<BeneficiaryUpdateEventResponse> beneficiaryUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(BENEFICIARYUPDATE_EVENT));
        return beneficiaryUpdateEventFlowable(filter);
    }

    public List<CheckinEventResponse> getCheckinEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CHECKIN_EVENT, transactionReceipt);
        ArrayList<CheckinEventResponse> responses = new ArrayList<CheckinEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CheckinEventResponse typedResponse = new CheckinEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.timestamp = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CheckinEventResponse> checkinEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, CheckinEventResponse>() {
            @Override
            public CheckinEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CHECKIN_EVENT, log);
                CheckinEventResponse typedResponse = new CheckinEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.timestamp = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<CheckinEventResponse> checkinEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CHECKIN_EVENT));
        return checkinEventFlowable(filter);
    }

    public List<DirectPayoutEventResponse> getDirectPayoutEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DIRECTPAYOUT_EVENT, transactionReceipt);
        ArrayList<DirectPayoutEventResponse> responses = new ArrayList<DirectPayoutEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DirectPayoutEventResponse typedResponse = new DirectPayoutEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.from = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DirectPayoutEventResponse> directPayoutEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DirectPayoutEventResponse>() {
            @Override
            public DirectPayoutEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DIRECTPAYOUT_EVENT, log);
                DirectPayoutEventResponse typedResponse = new DirectPayoutEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.from = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<DirectPayoutEventResponse> directPayoutEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DIRECTPAYOUT_EVENT));
        return directPayoutEventFlowable(filter);
    }

    public List<HeartBeatEventResponse> getHeartBeatEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(HEARTBEAT_EVENT, transactionReceipt);
        ArrayList<HeartBeatEventResponse> responses = new ArrayList<HeartBeatEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            HeartBeatEventResponse typedResponse = new HeartBeatEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.timestamp = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<HeartBeatEventResponse> heartBeatEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, HeartBeatEventResponse>() {
            @Override
            public HeartBeatEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(HEARTBEAT_EVENT, log);
                HeartBeatEventResponse typedResponse = new HeartBeatEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.timestamp = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<HeartBeatEventResponse> heartBeatEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(HEARTBEAT_EVENT));
        return heartBeatEventFlowable(filter);
    }

    public List<HeartBeatIntervalUpdateEventResponse> getHeartBeatIntervalUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(HEARTBEATINTERVALUPDATE_EVENT, transactionReceipt);
        ArrayList<HeartBeatIntervalUpdateEventResponse> responses = new ArrayList<HeartBeatIntervalUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            HeartBeatIntervalUpdateEventResponse typedResponse = new HeartBeatIntervalUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.interval = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<HeartBeatIntervalUpdateEventResponse> heartBeatIntervalUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, HeartBeatIntervalUpdateEventResponse>() {
            @Override
            public HeartBeatIntervalUpdateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(HEARTBEATINTERVALUPDATE_EVENT, log);
                HeartBeatIntervalUpdateEventResponse typedResponse = new HeartBeatIntervalUpdateEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.interval = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<HeartBeatIntervalUpdateEventResponse> heartBeatIntervalUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(HEARTBEATINTERVALUPDATE_EVENT));
        return heartBeatIntervalUpdateEventFlowable(filter);
    }

    public List<LeaderboardEventResponse> getLeaderboardEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LEADERBOARD_EVENT, transactionReceipt);
        ArrayList<LeaderboardEventResponse> responses = new ArrayList<LeaderboardEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LeaderboardEventResponse typedResponse = new LeaderboardEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.referrals = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.total_deposits = (Uint256) eventValues.getNonIndexedValues().get(1);
            typedResponse.total_payouts = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.total_structure = (Uint256) eventValues.getNonIndexedValues().get(3);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LeaderboardEventResponse> leaderboardEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LeaderboardEventResponse>() {
            @Override
            public LeaderboardEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LEADERBOARD_EVENT, log);
                LeaderboardEventResponse typedResponse = new LeaderboardEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.referrals = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.total_deposits = (Uint256) eventValues.getNonIndexedValues().get(1);
                typedResponse.total_payouts = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.total_structure = (Uint256) eventValues.getNonIndexedValues().get(3);
                return typedResponse;
            }
        });
    }

    public Flowable<LeaderboardEventResponse> leaderboardEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LEADERBOARD_EVENT));
        return leaderboardEventFlowable(filter);
    }

    public List<LimitReachedEventResponse> getLimitReachedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(LIMITREACHED_EVENT, transactionReceipt);
        ArrayList<LimitReachedEventResponse> responses = new ArrayList<LimitReachedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            LimitReachedEventResponse typedResponse = new LimitReachedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<LimitReachedEventResponse> limitReachedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, LimitReachedEventResponse>() {
            @Override
            public LimitReachedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(LIMITREACHED_EVENT, log);
                LimitReachedEventResponse typedResponse = new LimitReachedEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<LimitReachedEventResponse> limitReachedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(LIMITREACHED_EVENT));
        return limitReachedEventFlowable(filter);
    }

    public List<ManagerUpdateEventResponse> getManagerUpdateEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MANAGERUPDATE_EVENT, transactionReceipt);
        ArrayList<ManagerUpdateEventResponse> responses = new ArrayList<ManagerUpdateEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ManagerUpdateEventResponse typedResponse = new ManagerUpdateEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.manager = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.timestamp = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ManagerUpdateEventResponse> managerUpdateEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, ManagerUpdateEventResponse>() {
            @Override
            public ManagerUpdateEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MANAGERUPDATE_EVENT, log);
                ManagerUpdateEventResponse typedResponse = new ManagerUpdateEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.manager = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.timestamp = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<ManagerUpdateEventResponse> managerUpdateEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MANAGERUPDATE_EVENT));
        return managerUpdateEventFlowable(filter);
    }

    public List<MatchPayoutEventResponse> getMatchPayoutEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(MATCHPAYOUT_EVENT, transactionReceipt);
        ArrayList<MatchPayoutEventResponse> responses = new ArrayList<MatchPayoutEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            MatchPayoutEventResponse typedResponse = new MatchPayoutEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.from = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<MatchPayoutEventResponse> matchPayoutEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, MatchPayoutEventResponse>() {
            @Override
            public MatchPayoutEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(MATCHPAYOUT_EVENT, log);
                MatchPayoutEventResponse typedResponse = new MatchPayoutEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.from = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<MatchPayoutEventResponse> matchPayoutEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(MATCHPAYOUT_EVENT));
        return matchPayoutEventFlowable(filter);
    }

    public List<NewAirdropEventResponse> getNewAirdropEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWAIRDROP_EVENT, transactionReceipt);
        ArrayList<NewAirdropEventResponse> responses = new ArrayList<NewAirdropEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewAirdropEventResponse typedResponse = new NewAirdropEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            typedResponse.timestamp = (Uint256) eventValues.getNonIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewAirdropEventResponse> newAirdropEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewAirdropEventResponse>() {
            @Override
            public NewAirdropEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWAIRDROP_EVENT, log);
                NewAirdropEventResponse typedResponse = new NewAirdropEventResponse();
                typedResponse.log = log;
                typedResponse.from = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.to = (Address) eventValues.getIndexedValues().get(1);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                typedResponse.timestamp = (Uint256) eventValues.getNonIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<NewAirdropEventResponse> newAirdropEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWAIRDROP_EVENT));
        return newAirdropEventFlowable(filter);
    }

    public List<NewDepositEventResponse> getNewDepositEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWDEPOSIT_EVENT, transactionReceipt);
        ArrayList<NewDepositEventResponse> responses = new ArrayList<NewDepositEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewDepositEventResponse typedResponse = new NewDepositEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewDepositEventResponse> newDepositEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, NewDepositEventResponse>() {
            @Override
            public NewDepositEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWDEPOSIT_EVENT, log);
                NewDepositEventResponse typedResponse = new NewDepositEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewDepositEventResponse> newDepositEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWDEPOSIT_EVENT));
        return newDepositEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    public List<UplineEventResponse> getUplineEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPLINE_EVENT, transactionReceipt);
        ArrayList<UplineEventResponse> responses = new ArrayList<UplineEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UplineEventResponse typedResponse = new UplineEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.upline = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<UplineEventResponse> uplineEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, UplineEventResponse>() {
            @Override
            public UplineEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(UPLINE_EVENT, log);
                UplineEventResponse typedResponse = new UplineEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.upline = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<UplineEventResponse> uplineEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(UPLINE_EVENT));
        return uplineEventFlowable(filter);
    }

    public List<WithdrawEventResponse> getWithdrawEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(WITHDRAW_EVENT, transactionReceipt);
        ArrayList<WithdrawEventResponse> responses = new ArrayList<WithdrawEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            WithdrawEventResponse typedResponse = new WithdrawEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, WithdrawEventResponse>() {
            @Override
            public WithdrawEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(WITHDRAW_EVENT, log);
                WithdrawEventResponse typedResponse = new WithdrawEventResponse();
                typedResponse.log = log;
                typedResponse.addr = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.amount = (Uint256) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<WithdrawEventResponse> withdrawEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(WITHDRAW_EVENT));
        return withdrawEventFlowable(filter);
    }

    public RemoteFunctionCall<Uint256> CompoundTax() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_COMPOUNDTAX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> ExitTax() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_EXITTAX, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> MAX_UINT() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_UINT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> airdrop(Address _to, Uint256 _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_AIRDROP, 
                Arrays.<Type>asList(_to, _amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple3<Uint256, Uint256, Uint256>> airdrops(Address param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_AIRDROPS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple3<Uint256, Uint256, Uint256>>(function,
                new Callable<Tuple3<Uint256, Uint256, Uint256>>() {
                    @Override
                    public Tuple3<Uint256, Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Uint256, Uint256, Uint256>(
                                (Uint256) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2));
                    }
                });
    }

    public RemoteFunctionCall<Uint8> balanceLevel(Address _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_BALANCELEVEL, 
                Arrays.<Type>asList(_addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> checkin() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CHECKIN, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> claim() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_CLAIM, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> claimsAvailable(Address _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CLAIMSAVAILABLE, 
                Arrays.<Type>asList(_addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple6<Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>> contractInfo() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CONTRACTINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple6<Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>>(function,
                new Callable<Tuple6<Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>>() {
                    @Override
                    public Tuple6<Uint256, Uint256, Uint256, Uint256, Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>(
                                (Uint256) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3), 
                                (Uint256) results.get(4), 
                                (Uint256) results.get(5));
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<Uint256, Uint256>> creditsAndDebits(Address _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CREDITSANDDEBITS, 
                Arrays.<Type>asList(_addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple2<Uint256, Uint256>>(function,
                new Callable<Tuple2<Uint256, Uint256>>() {
                    @Override
                    public Tuple2<Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<Uint256, Uint256>(
                                (Uint256) results.get(0), 
                                (Uint256) results.get(1));
                    }
                });
    }

    public RemoteFunctionCall<Tuple5<Address, Address, Uint256, Uint256, Uint256>> custody(Address param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_CUSTODY, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple5<Address, Address, Uint256, Uint256, Uint256>>(function,
                new Callable<Tuple5<Address, Address, Uint256, Uint256, Uint256>>() {
                    @Override
                    public Tuple5<Address, Address, Uint256, Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<Address, Address, Uint256, Uint256, Uint256>(
                                (Address) results.get(0), 
                                (Address) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3), 
                                (Uint256) results.get(4));
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> deposit(Address _upline, Uint256 _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_DEPOSIT, 
                Arrays.<Type>asList(_upline, _amount), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> deposit_bracket_size() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DEPOSIT_BRACKET_SIZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> dripVaultAddress() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DRIPVAULTADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple3<Address, Uint256, Address>> getCustody(Address _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETCUSTODY, 
                Arrays.<Type>asList(_addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Address>() {}));
        return new RemoteFunctionCall<Tuple3<Address, Uint256, Address>>(function,
                new Callable<Tuple3<Address, Uint256, Address>>() {
                    @Override
                    public Tuple3<Address, Uint256, Address> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple3<Address, Uint256, Address>(
                                (Address) results.get(0), 
                                (Uint256) results.get(1), 
                                (Address) results.get(2));
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> initialize() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALIZE, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Bool> isBalanceCovered(Address _addr, Uint8 _level) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISBALANCECOVERED, 
                Arrays.<Type>asList(_addr, _level), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Bool> isNetPositive(Address _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISNETPOSITIVE, 
                Arrays.<Type>asList(_addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple4<Uint256, Uint256, Uint256, Uint256>> lastActivity(Address _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_LASTACTIVITY, 
                Arrays.<Type>asList(_addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<Uint256, Uint256, Uint256, Uint256>>(function,
                new Callable<Tuple4<Uint256, Uint256, Uint256, Uint256>>() {
                    @Override
                    public Tuple4<Uint256, Uint256, Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<Uint256, Uint256, Uint256, Uint256>(
                                (Uint256) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3));
                    }
                });
    }

    public RemoteFunctionCall<Uint256> maxPayoutOf(Uint256 _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAXPAYOUTOF, 
                Arrays.<Type>asList(_amount), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> max_payout_cap() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_MAX_PAYOUT_CAP, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Address> owner() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Tuple4<Uint256, Uint256, Uint256, Uint256>> payoutOf(Address _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PAYOUTOF, 
                Arrays.<Type>asList(_addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple4<Uint256, Uint256, Uint256, Uint256>>(function,
                new Callable<Tuple4<Uint256, Uint256, Uint256, Uint256>>() {
                    @Override
                    public Tuple4<Uint256, Uint256, Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<Uint256, Uint256, Uint256, Uint256>(
                                (Uint256) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3));
                    }
                });
    }

    public RemoteFunctionCall<Uint256> ref_balances(Uint256 param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_REF_BALANCES, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> renounceOwnership() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> roll() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ROLL, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Uint256> sustainabilityFeeV2(Address _addr, Uint256 _pendingDiv) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SUSTAINABILITYFEEV2, 
                Arrays.<Type>asList(_addr, _pendingDiv), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> total_airdrops() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTAL_AIRDROPS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> total_bnb() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTAL_BNB, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> total_deposited() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTAL_DEPOSITED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> total_txs() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTAL_TXS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> total_users() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTAL_USERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<Uint256> total_withdraw() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_TOTAL_WITHDRAW, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferOwnership(Address newOwner) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateCompoundTax(Uint256 _newCompoundTax) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATECOMPOUNDTAX, 
                Arrays.<Type>asList(_newCompoundTax), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateDepositBracketSize(Uint256 _newBracketSize) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEDEPOSITBRACKETSIZE, 
                Arrays.<Type>asList(_newBracketSize), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateExitTax(Uint256 _newExitTax) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEEXITTAX, 
                Arrays.<Type>asList(_newExitTax), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateHoldRequirements(DynamicArray<Uint256> _newRefBalances) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEHOLDREQUIREMENTS, 
                Arrays.<Type>asList(_newRefBalances), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateInitialDeposit(Uint256 _newInitialDeposit) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEINITIALDEPOSIT, 
                Arrays.<Type>asList(_newInitialDeposit), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateMaxPayoutCap(Uint256 _newPayoutCap) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEMAXPAYOUTCAP, 
                Arrays.<Type>asList(_newPayoutCap), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updatePayoutRate(Uint256 _newPayoutRate) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEPAYOUTRATE, 
                Arrays.<Type>asList(_newPayoutRate), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateRefBonus(Uint256 _newRefBonus) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEREFBONUS, 
                Arrays.<Type>asList(_newRefBonus), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateRefDepth(Uint256 _newRefDepth) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_UPDATEREFDEPTH, 
                Arrays.<Type>asList(_newRefDepth), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>> userInfo(Address _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERINFO, 
                Arrays.<Type>asList(_addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>>(function,
                new Callable<Tuple7<Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>>() {
                    @Override
                    public Tuple7<Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>(
                                (Address) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3), 
                                (Uint256) results.get(4), 
                                (Uint256) results.get(5), 
                                (Uint256) results.get(6));
                    }
                });
    }

    public RemoteFunctionCall<Tuple6<Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>> userInfoTotals(Address _addr) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERINFOTOTALS, 
                Arrays.<Type>asList(_addr), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple6<Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>>(function,
                new Callable<Tuple6<Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>>() {
                    @Override
                    public Tuple6<Uint256, Uint256, Uint256, Uint256, Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>(
                                (Uint256) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3), 
                                (Uint256) results.get(4), 
                                (Uint256) results.get(5));
                    }
                });
    }

    public RemoteFunctionCall<Tuple11<Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>> users(Address param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_USERS, 
                Arrays.<Type>asList(param0), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple11<Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>>(function,
                new Callable<Tuple11<Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>>() {
                    @Override
                    public Tuple11<Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple11<Address, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256, Uint256>(
                                (Address) results.get(0), 
                                (Uint256) results.get(1), 
                                (Uint256) results.get(2), 
                                (Uint256) results.get(3), 
                                (Uint256) results.get(4), 
                                (Uint256) results.get(5), 
                                (Uint256) results.get(6), 
                                (Uint256) results.get(7), 
                                (Uint256) results.get(8), 
                                (Uint256) results.get(9), 
                                (Uint256) results.get(10));
                    }
                });
    }

    @Deprecated
    public static FaucetV4 load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new FaucetV4(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static FaucetV4 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new FaucetV4(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static FaucetV4 load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new FaucetV4(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static FaucetV4 load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new FaucetV4(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<FaucetV4> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(FaucetV4.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<FaucetV4> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(FaucetV4.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<FaucetV4> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(FaucetV4.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<FaucetV4> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(FaucetV4.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class BalanceTransferEventResponse extends BaseEventResponse {
        public Address _src;

        public Address _dest;

        public Uint256 _deposits;

        public Uint256 _payouts;
    }

    public static class BeneficiaryUpdateEventResponse extends BaseEventResponse {
        public Address addr;

        public Address beneficiary;
    }

    public static class CheckinEventResponse extends BaseEventResponse {
        public Address addr;

        public Uint256 timestamp;
    }

    public static class DirectPayoutEventResponse extends BaseEventResponse {
        public Address addr;

        public Address from;

        public Uint256 amount;
    }

    public static class HeartBeatEventResponse extends BaseEventResponse {
        public Address addr;

        public Uint256 timestamp;
    }

    public static class HeartBeatIntervalUpdateEventResponse extends BaseEventResponse {
        public Address addr;

        public Uint256 interval;
    }

    public static class LeaderboardEventResponse extends BaseEventResponse {
        public Address addr;

        public Uint256 referrals;

        public Uint256 total_deposits;

        public Uint256 total_payouts;

        public Uint256 total_structure;
    }

    public static class LimitReachedEventResponse extends BaseEventResponse {
        public Address addr;

        public Uint256 amount;
    }

    public static class ManagerUpdateEventResponse extends BaseEventResponse {
        public Address addr;

        public Address manager;

        public Uint256 timestamp;
    }

    public static class MatchPayoutEventResponse extends BaseEventResponse {
        public Address addr;

        public Address from;

        public Uint256 amount;
    }

    public static class NewAirdropEventResponse extends BaseEventResponse {
        public Address from;

        public Address to;

        public Uint256 amount;

        public Uint256 timestamp;
    }

    public static class NewDepositEventResponse extends BaseEventResponse {
        public Address addr;

        public Uint256 amount;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public Address previousOwner;

        public Address newOwner;
    }

    public static class UplineEventResponse extends BaseEventResponse {
        public Address addr;

        public Address upline;
    }

    public static class WithdrawEventResponse extends BaseEventResponse {
        public Address addr;

        public Uint256 amount;
    }
}
